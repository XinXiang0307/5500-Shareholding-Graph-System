[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "金融业与知识图谱",
    "section": "",
    "text": "Explain your chosen topic and why it is important for your field.\n在这个项目里，我选择了图数据结构，并且阐述在传统金融行业面临的困境。\n通过图结构在金融行业的垂直领域进行深耕，能够挖掘出很多我们无法在普通关系性数据库发现的细节。编织出一张知识图谱，辅助金融行业的高风险管理。"
  },
  {
    "objectID": "index.html#literature-review",
    "href": "index.html#literature-review",
    "title": "金融业与知识图谱",
    "section": "Literature Review",
    "text": "Literature Review\n\n讨论知识图谱的进化发展历程（简短）\n\n\n讨论金融系统（传统银行）里进行数据分析的复杂性和重要性（简短）\n\n\n讨论知识图谱在金融行业的应用（重点）"
  },
  {
    "objectID": "index.html#example-simple-shareholding-graph-system",
    "href": "index.html#example-simple-shareholding-graph-system",
    "title": "金融业与知识图谱",
    "section": "Example : Simple Shareholding Graph System",
    "text": "Example : Simple Shareholding Graph System\n\nDescription\n\n\nData source\nperson can hold a corp in {share} % person can be relative with another person corp can hold another corp in {share} % corp can be a branch of another corp person can be as a role of a corp\n\n\nCode\n\nData preparation\n\n# Python code to illustrate the example\nclass Graph:\n    def __init__(self):\n        self.adjacency_list = {}  \n\n    def add_vertex(self, vertex):\n        if vertex not in self.adjacency_list:\n            self.adjacency_list[vertex] = []\n\n    def add_edge(self, from_vertex, to_vertex, weight=0):\n        if from_vertex in self.adjacency_list:\n            self.adjacency_list[from_vertex].append((to_vertex, weight))\n\n    def remove_edge(self, from_vertex, to_vertex):\n        if from_vertex in self.adjacency_list:\n            self.adjacency_list[from_vertex] = [t for t in self.adjacency_list[from_vertex] if t[0] != to_vertex]\n\n    def remove_vertex(self, vertex):\n        self.adjacency_list.pop(vertex, None)\n        for v in self.adjacency_list:\n            self.adjacency_list[v] = [t for t in self.adjacency_list[v] if t[0] != vertex]\n\n    def get_edges(self, vertex):\n        return self.adjacency_list.get(vertex, [])\n\n    def update_edge(self, from_vertex, to_vertex, new_weight):\n        if from_vertex in self.adjacency_list:\n            self.adjacency_list[from_vertex] = [(v, w if v != to_vertex else new_weight) for v, w in self.adjacency_list[from_vertex]]"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "金融业与知识图谱",
    "section": "Conclusion",
    "text": "Conclusion\n这种图结构出来的知识图谱可以运用到金融行业里，比如说进行客户分群，精准提升金融行业"
  }
]